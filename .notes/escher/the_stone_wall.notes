// As input you'll get a multiline string consists of '0' and '#' - a view of a
// stone wall from above. The '#' will show the stone part of the wall and the
// '0' will show the empty part. The relative location of you and the wall is
// as follows: you look at the array from the bottom of it.
//
// Your task is to find the index of the place where the wall is the narrowest
// (as shown at the picture below). The width of the wall is the height of the
// columns of the array (multiline string). If there are several such places,
// return the index of leftmost. Index starts from 0.
//
// Input:
// - Array represents the stone wall.
//
// Output:
// - List of the weakest spots.
//
// Precondition:
// - 3x3 <= array size <= 10x10
//
///////////////////////////////////////////////////////////////////////////////

"use strict";


function stoneWall(wall) {
  wall = wall.slice(1,-1).replace(/[^0-9\n]/g, 1).split('\n')
  var strength = new Array(wall[0].length).fill(0)


  wall.forEach(function(row){
    row = row.split('').map(brick => parseInt(brick))
    row.forEach(function(brick, index){
      strength[index] += brick
    })
  })
  console.log(strength)
  return strength.indexOf(Math.min(...strength));
}

var assert = require('assert');
if (!global.is_checking) {
    console.log('Example:')
    console.log(stoneWall(`
##########
####0##0##
00##0###00
`))

    // These "asserts" are used for self-checking and not for an auto-testing
    assert.equal(stoneWall(`
##########
####0##0##
00##0###00
`), 4)


    assert.equal(stoneWall(`
#00#######
#######0##
00######00
`), 1)

    assert.equal(stoneWall(`
#####
#####
#####
`), 0)

    console.log("Coding complete? Click 'Check' to earn cool rewards!");
}

