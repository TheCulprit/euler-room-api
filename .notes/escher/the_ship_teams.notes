// You have to divide all your crew members into 2 teams with the next rules:
// - those who are elder than 40 y.o. or younger than 20, should be on the
//   first ship and all the others - on the second. It will helps the young
//   sailors gain the experience of the elder collegues.
// - The input data will be the dictionary where keys will be the surnames of
//   the sailors and the values will be their ages. After the crew formating,
//   you should sort all of the sailors in the alphabetical order in the each
//   list of surnames.
//
// Input:
// - Dictionary with the sailors and their ages.
//
// Output:
// - List of the lists with 2 teams.
//
// Precondition:
// - 1 <= amount of the sailors <= 100
//
///////////////////////////////////////////////////////////////////////////////

"use strict";

function twoTeams(sailors) {
    var teams = [[],[]]
    Object.keys(sailors).forEach(function(sailor){
        sailors[sailor] >= 20 && sailors[sailor] <= 40 ? teams[1].push(sailor) : teams[0].push(sailor)
    });
    return [teams[0].sort(), teams[1].sort()];
}

var assert = require('assert');
if (!global.is_checking) {
    console.log('Example:')
    console.log(twoTeams({
        'Smith': 34,
        'Wesson': 22,
        'Coleman': 45,
        'Abrahams': 19
    }))

    // These "asserts" are used for self-checking and not for an auto-testing
    assert.deepEqual(twoTeams({
        'Smith': 34,
        'Wesson': 22,
        'Coleman': 45,
        'Abrahams': 19
        }), [
            ['Abrahams', 'Coleman'],
            ['Smith', 'Wesson']
        ])

    assert.deepEqual(twoTeams({
        'Fernandes': 18,
        'Johnson': 22,
        'Kale': 41,
        'McCortney': 54
        }), [
            ['Fernandes', 'Kale', 'McCortney'],
            ['Johnson']
        ])

    console.log("Coding complete? Click 'Check' to earn cool rewards!");
}
