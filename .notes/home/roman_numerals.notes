// Roman numerals come from the ancient Roman numbering system. They are based on
// specific letters of the alphabet which are combined to signify the sum (or, in
// some cases, the difference) of their values. The first ten Roman numerals are:
//   I, II, III, IV, V, VI, VII, VIII, IX, and X.

// The Roman numeral system is decimal based but not directly positional and does
// not include a zero. Roman numerals are based on combinations of these seven symbols:

// Numeral Value
// I 1 (unus)
// V 5 (quinque)
// X 10 (decem)
// L 50 (quinquaginta)
// C 100 (centum)
// D 500 (quingenti)
// M 1,000 (mille)

// More additional information about roman numerals can be found on the Wikipedia article.

// For this task, you should return a roman numeral using the specified integer value ranging from 1 to 3999.
// Input:
//   A number as an integer.
// Output:
//   The Roman numeral as a string.
// Precondition:
//   0 < number < 4000


"use strict";

function dec_to_roman(number) {
  var roman = [];
  var mapper = { 1000: "M", 900: "CM", 500: "D", 400: "CD", 100: "C", 90: "XC", 50: "L", 40: "XL", 10: "X", 9: "IX", 5: "V", 4: "IV", 1: "I"}

  Object.keys(mapper).reverse().forEach(function(base_value){
    if(number >= base_value){
      for (var i = 0; i < Math.floor(number/base_value); i++) roman.push(mapper[base_value]);
      number = number % base_value;
    };
  });
  return roman.join('');
}

var assert = require('assert');

if (!global.is_checking) {
    assert.equal(romanNumerals(6), 'VI', "First");
    assert.equal(romanNumerals(76), 'LXXVI', "Second");
    assert.equal(romanNumerals(499), 'CDXCIX', "Third");
    assert.equal(romanNumerals(3888), 'MMMDCCCLXXXVIII', "Forth");
    console.log("Done! Go Check!");
}

////////// Change it back! /////////////////////////
"use strict";

function roman_to_dec(number) {
  const converter = { "I": 1, "IV": 4, "V": 5, "IX": 9, "X": 10, "XL": 40, "L": 50, "XC": 90, "C": 100, "CD": 400, "D": 500, "CM": 900, "M": 1000 }
  var sum = 0;
  number = number.split("");

  while(number.length > 0){

    cur = [number[0]+number[1]]

    if(converter[cur] != undefined ) {
      sum += converter[cur]
      number.shift()
    }else{
      sum += converter[number[0]]
    }
    number.shift()
  }
  console.log(sum);
  return sum;
}

var assert = require('assert');

if (!global.is_checking) {
    assert.equal(romanNumerals(6), 'VI', "First");
    assert.equal(romanNumerals(76), 'LXXVI', "Second");
    assert.equal(romanNumerals(499), 'CDXCIX', "Third");
    assert.equal(romanNumerals(3888), 'MMMDCCCLXXXVIII', "Forth");
    console.log("Done! Go Check!");
}

