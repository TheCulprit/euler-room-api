####################################################################################################
# Problem 37
# Truncatable primes
#
# The number 3797 has an interesting property. Being prime itself, it is possible
# to continuously remove digits from left to right, and remain prime at each stage:
#   3797, 797, 97, and 7.
# Similarly we can work from right to left:
#   3797, 379, 37, and 3.
#
# Find the sum of the only eleven primes that are both truncatable from left to
# right and right to left.
#
# NOTE: 2, 3, 5, and 7 are not considered to be truncatable primes.
#
####################################################################################################
require 'prime'

def check(prime)
  pa = prime.to_s.split("")
  primes = [prime]

  (0...pa.length - 1).to_a.each do |p|
    p = p+1
    primes << pa[0, p].join("").to_s.to_i
    primes <<  pa[-p, p].join("").to_s.to_i
  end

  primes.all?{ |p| p.prime? }
end

a = []
(Prime.first(100000) - [2,3,5,7]).each do |p|
  a << p if check(p)
end;nil
puts a.sum


"<p>&nbsp&nbsp&nbsp&nbsprequire 'prime'</p><p>&nbsp&nbsp&nbsp&nbspdef check(prime)</p><p>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspprimes_array = prime.to_s.split(\"\")</p><p>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspprimes = [prime]</p><br/><p>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp(0...primes_array.length - 1).to_a.each do |p|</p><p>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspp = p+1</p><p>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspprimes << primes_array[0, p].join(\"\").to_s.to_i</p><p>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspprimes << primes_array[-p, p].join(\"\").to_s.to_i</p><p>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspend</p><br/><p>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspprimes.all?{ |p| p.prime? }</p><p>&nbsp&nbsp&nbsp&nbspend</p><br/><p>&nbsp&nbsp&nbsp&nbspresult_array = []</p><p>&nbsp&nbsp&nbsp&nbsp(Prime.first(100000) - [2,3,5,7]).each do |p|</p><p>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspresult_array << p if check(p)</p><p>&nbsp&nbsp&nbsp&nbspend;nil</p><p>&nbsp&nbsp&nbsp&nbspputs result_array.sum</p>"



{
  "data": {
    "type": "problem",
    "attributes": {
	  "title": "Truncatable primes",
	  "description": "<p>Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:<br/><br/>&nbsp&nbsp&nbsp&nbsp1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...<br/><br/>Consider the terms in the Fibonacci sequence whose values do not exceed four million find the sum of the even-valued terms.</p>",
	  "solution": "748317",
	  "solution_type": "Integer",
	  "solution_text": "<p>&nbsp&nbsp&nbsp&nbsprequire 'prime'</p><p>&nbsp&nbsp&nbsp&nbspdef check(prime)</p><p>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspprimes_array = prime.to_s.split(\"\")</p><p>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspprimes = [prime]</p><br/><p>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp(0...primes_array.length - 1).to_a.each do |p|</p><p>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspp = p+1</p><p>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspprimes << primes_array[0, p].join(\"\").to_s.to_i</p><p>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspprimes << primes_array[-p, p].join(\"\").to_s.to_i</p><p>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspend</p><br/><p>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspprimes.all?{ |p| p.prime? }</p><p>&nbsp&nbsp&nbsp&nbspend</p><br/><p>&nbsp&nbsp&nbsp&nbspresult_array = []</p><p>&nbsp&nbsp&nbsp&nbsp(Prime.first(100000) - [2,3,5,7]).each do |p|</p><p>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspresult_array << p if check(p)</p><p>&nbsp&nbsp&nbsp&nbspend;nil</p><p>&nbsp&nbsp&nbsp&nbspputs result_array.sum</p>"
    }
  }
}
